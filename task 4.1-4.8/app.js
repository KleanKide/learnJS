// 1. –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç counter, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å:
// —Å–≤–æ–π—Å—Ç–≤–æ count
// –º–µ—Ç–æ–¥—ã increment(), decrement(), show()
const counter = {
  count: 0,
  increment(){
    this.count++
    return this
  },
  decrement(){
    this.count--
    return this
  },
  show(){
    return console.log(this.count)
  }
}
counter.increment().increment().decrement().show()

// –ó–∞–¥–∞—á–∞ 2: –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç person —Å –ø–æ–ª—è–º–∏ name, age, –∏ –º–µ—Ç–æ–¥–æ–º sayHi.
let person = {
    name: "Alice",
    age: 28,
    sayHi() {
      console.log("Hi, I'm " + this.name);
    }
  };
  
  person.sayHi(); 
// –ó–∞–¥–∞—á–∞ 3: –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç car —Å –ø–æ–ª—è–º–∏ brand, model –∏ year, –∏ –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ.
let car = {
    brand: "Toyota",
    model: "Corolla",
    year: 2020,
    getInfo() {
      console.log(`–ú–∞—Ä–∫–∞: ${this.brand}, –ú–æ–¥–µ–ª—å: ${this.model}, –ì–æ–¥: ${this.year}`);
    }
  };
  
  car.getInfo();
// –ó–∞–¥–∞—á–∞ 4 : –ö–æ–ø–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç user —Å –ø–æ–º–æ—â—å—é Object.assign –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, 
// —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç.

let user = { name: "Tom", age: 30 };
let copy = Object.assign({}, user);

copy.name = "Jerry";
console.log(user.name);  // "Tom"
console.log(copy.name);  // "Jerry"

// –ó–∞–¥–∞—á–∞ 5: –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Person, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å name –∏ age –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
// –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å —ç—Ç–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

function Person(name, age) {
    this.name = name;
    this.age = age;
  }
  
  let person1 = new Person("Tom", 25);
  console.log(person1.name);  // "Tom"

// –ó–∞–¥–∞—á–∞ 6: –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ –ø—Ä–∏–º–∏—Ç–∏–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.
let obj = {
    toString() {
      return "–ü—Ä–∏–≤–µ—Ç";
    }
  };
  
  console.log(String(obj));
  
//–ó–∞–¥–∞—á–∞ 7 –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
//  –°–¥–µ–ª–∞–π –æ–±—ä–µ–∫—Ç user, —á—Ç–æ–±—ã –ø—Ä–∏ String(user) –≤–æ–∑–≤—Ä–∞—â–∞–ª–æ—Å—å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" (–Ω–∏–∫–∞–∫–∏—Ö Symbol'–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã)

const user = {
  toString() {
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }
};

console.log(String(user)); 

// –ó–∞–¥–∞—á–∞ 8: –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å
//  –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç item, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏:
// +item ‚Üí 0
// String(item) ‚Üí "–≤–µ—â—å"
// item == 1 ‚Üí false
// –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Symbol.toPrimitive


const item = {
  [Symbol.toPrimitive](hint){
    if(hint === 'number') return 0
    if(hint === 'string') return '–í–µ—â—å'
    if(hint === 'default') return false
  }
}
console.log(+item)
console.log(String(item))
console.log(item === 1)

//  –ó–∞–¥–∞—á–∞ 9: 
// üëâ –°–¥–µ–ª–∞–π –æ–±—ä–µ–∫—Ç tricky, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—ë—Ç true –ø—Ä–∏ tricky == 42,
// –Ω–æ String(tricky) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [object Object] (—Ç–æ –µ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–π toString –Ω–∞–ø—Ä—è–º—É—é).

const tricky = {
  [Symbol.toPrimitive](hint){
    if(hint==='default') return 42
  }
}
console.log(tricky == 42)


// –ó–∞–¥–∞—á–∞ 10:  –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç bad, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –ª—é–±–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (+bad, String(bad), alert(bad))
// –≤—Å–µ–≥–¥–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É "Cannot convert to primitive".
const bad = {
  [Symbol.toPrimitive](hint) {
    return {};
  }
};

console.log(String(bad)); //TypeError: Cannot convert object to primitive value
