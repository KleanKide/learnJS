// –ó–∞–¥–∞—á–∞ 1:  –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é roundTo(value, digits), –∫–æ—Ç–æ—Ä–∞—è –æ–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ value –¥–æ digits –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
function roundTo(value, digits){
  const sum = value.toFixed(digits)
  return +sum
}
console.log(roundTo(1.545 , 10))

// –ó–∞–¥–∞—á–∞ 2: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é analyzeNumber(input), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏:
// üîç 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ (–∏—Å–ø–æ–ª—å–∑—É–π Number, parseInt, parseFloat)
// –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–∏, –∏ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–≥–æ
// ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ NaN (isNaN)
// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º (isFinite)
// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Ü–µ–ª—ã–º (Number.isInteger)
// –û–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å Math.round, Math.floor, Math.ceil, Math.trunc

function analyzeNumber(input) {
  const num = Number(input);

  return {
    original: input,
    number: num,
    parseInt: parseInt(input),
    parseFloat: parseFloat(input),
    isNaN: isNaN(num),
    isFinite: Number.isFinite(num),
    isInteger: Number.isInteger(num),
    round: Math.round(num),
    floor: Math.floor(num),
    ceil: Math.ceil(num),
    trunc: Math.trunc(num),
    fixed: num.toFixed(2)
  };
}

console.log(analyzeNumber("12.345"));

// –ó–∞–¥–∞—á–∞ 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è:
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ—ë –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º (–∏—Å–ø–æ–ª—å–∑—É–π isFinite).
// –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:
// –û–∫—Ä—É–≥–ª—è–µ—Ç –µ–≥–æ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (toFixed)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
// "–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 12.35"
// –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ:
// –í–µ—Ä–Ω–∏: "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"

function correctedNumber(value){
  const toNum = Number(value)
  if(Number.isFinite(toNum)){
    const sum = +toNum.toFixed(2)
    return sum
  }
  return value
 
  
}
console.log(correctedNumber('1.2543'))

// –ó–∞–¥–∞—á–∞ 4: –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é isSafeInteger, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// true ‚Äî –µ—Å–ª–∏:
// –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —á–∏—Å–ª–æ
// –æ–Ω–æ –∫–æ–Ω–µ—á–Ω–æ–µ
// —Ü–µ–ª–æ–µ
// –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª JavaScript (—Ç–æ –µ—Å—Ç—å –æ—Ç Number.MIN_SAFE_INTEGER –¥–æ Number.MAX_SAFE_INTEGER, –≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã)
// '–û—à–∏–±–∫–∞' ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

function isSafeInteger(value) {
  const maxNum = Number.MAX_SAFE_INTEGER;
  const minNum = Number.MIN_SAFE_INTEGER;

  if (
    typeof value === "number" &&
    Number.isFinite(value) &&
    Number.isInteger(value) &&
    value <= maxNum &&
    value >= minNum
  ) {
    return true;
  }

  return "–û—à–∏–±–∫–∞";
}